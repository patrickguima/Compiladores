PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.*;

class ArvoreLugosi{//
	Main my_main;
	ArrayList <Func> funcoes;

    ArvoreLugosi(Main m, ArrayList<Func> f){
        this.my_main = m; 
        this.funcoes = f;
    }
}

class Main{//
	ArrayList <VarDecl> varD;
	ArrayList <Comando> comandos;

    Main(ArrayList <VarDecl> varD, ArrayList <Comando> comandos){
        this.varD = varD;
        this.comandos = comandos;
    }
}

class VarDecl{ //possivel erro - Tipo tipo ou String tipo
	String tipo;
	String var;

    VarDecl(Token id, String tipo){
        this.var = id.image;
        this.tipo = tipo;
    }
}

class SeqComandos{//
    ArrayList <Comando> comandos;

    SeqComandos(ArrayList <Comando> c) {
        this.comandos = c;
    }
}

class Comando{}//
class CmdAtribuicao extends Comando{ // x = 4 + a;
	String var;  
	Exp e;

    CmdAtribuicao(Token id, Exp cmd){ 
        this.var = id.image;
        this.e = cmd;
    }
}

class CmdChamadaFuncao extends Comando{ // titi(int a, char b);
	String nomeFuncao;
	ArrayList <Exp> argumentos;

    CmdChamadaFuncao(Token id, ArrayList <Exp> arg){
        this.nomeFuncao = id.image;
        this.argumentos = arg;
    }
}

class CmdIf extends Comando{//
	Exp exp;
	ArrayList <Comando> then;

    CmdIf(Exp e, ArrayList <Comando> seqComandos){
        this.exp = e;
        this.then = seqComandos;
    }
}
class CmdWhile extends Comando{//
	Exp exp;
	ArrayList <Comando> comandos;

    CmdWhile(Exp e, ArrayList <Comando> seqComandos){
        this.exp = e;
        this.comandos = seqComandos;
    }
}
class CmdDoWhile extends Comando{//
	ArrayList <Comando> comandos;
	Exp exp;

    CmdDoWhile(Exp e, ArrayList <Comando> seqComandos){
        this.comandos = seqComandos;
        this.exp = e;
    }
}
class CmdReturn extends Comando{//
	Exp exp;

    CmdReturn(Exp e){
        this.exp = e;
    }
} 
class CmdPrint extends Comando{//
	Exp exp;
    CmdPrint(Exp e){
        this.exp = e;
    }
}

class Exp{}//
class ExpOperador extends Exp{//
	Exp arg1;
	Exp arg2;
	String operador;

    ExpOperador(Exp a1, Exp a2, String operador){
        this.arg1 = a1;
        this.arg2 = a2;
        this.operador = operador;
    }
}
class Fator extends Exp{}//
class FtrTokenId extends Fator{//
	String id;

    FtrTokenId(String id){
        this.id = id;
    }
}
class FtrExpPar extends Fator{//
	String id;
	ArrayList <Exp> listExp;

    FtrExpPar(String id, ArrayList <Exp> listExp){
        this.id = id;
        this.listExp = listExp;
    }
}

class FtrNumLiteral extends Fator {//
    String numLiteral;

    FtrNumLiteral(String numLiteral){
        this.numLiteral = numLiteral;
    }
}

class FtrTipo extends Fator{//
    String tipo;

    FtrTipo(String tipo){
        this.tipo = tipo;
    }
}

class ListaExp{//
    Exp e;

    ListaExp(Exp e){
        this.e = e;
    }
}

class Func{ //
    String id;
    String tipo;
    ArrayList <ListaArg> argumentos;
    ArrayList <VarDecl> vd;
    ArrayList <Comando> seqComandos;

    Func(Token id, String tipo, ArrayList <ListaArg> argumentos, ArrayList <VarDecl> vd, ArrayList <Comando> seqComandos){
        this.id = id.image;
        this.tipo = tipo;
        this.argumentos = argumentos;
        this.vd = vd;        
        this.seqComandos = seqComandos;
    }
}

class ListaArg{
    String tipo;
    String id;

    ListaArg(String tipo, Token id){
        this.tipo = tipo;
        this.id = id.image;
    }
}

public class Lugosi {
    public static void main(String args[]) throws Exception{
        
        Lugosi parser = new Lugosi(new FileInputStream(args[0]));
        ArvoreLugosi lug = parser.Lugosi();
        printerInicio(lug);
        //printers{}
    }

    public static void printerInicio(ArvoreLugosi lug){
        
        System.out.print("#include <iostream>\n");
        System.out.print("\nusing namespace std;\n");

        for(Func f : lug.funcoes){ //para imprimir as funcoes
            printerFunc(f);
        }

        //printerMain
    }

    public static void printerFunc(Func f){
        int cont = 0;
        System.out.print(f.tipo + " ");
        System.out.print(f.id + " (");

        for(ListaArg arg: f.argumentos){
            printerArgumentos(arg);
            if((f.argumentos).size() > 1 && cont < (f.argumentos).size() - 1){
                System.out.print(", ");
            }
            cont+=1;
        }

        System.out.println("){");

        for(VarDecl v : f.vd){ //printa declaracao de variaveis
            printerVarDecl(v);
        }

        for(Comando c : f.seqComandos){
            printerComando(c);
        }
        System.out.println("}");
    }

    public static void printerArgumentos(ListaArg arg){
        	System.out.print(arg.tipo + " ");
		    System.out.print(arg.id);
    }

    public static void printerVarDecl(VarDecl v){
        System.out.println(v.tipo +" "+ v.var +"; ");
    }

    public static void printerComando(Comando c){
        if (c instanceof CmdAtribuicao){
			printerCmdAtribuicao(c);
		}
    }
    
    public static void printerCmdAtribuicao(Comando c){
		System.out.print(((CmdAtribuicao) c).var + " ");
		//printerComandoNR(((CAtrib) c).e);
    }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
|<VAR: "var">
|<PONTOVIR: ";">
|<TIPO: ("int" | "bool")>
|<IF: "if">
|<WHILE: "while">
|<DO: "do">
|<RETURN: "return">
|<PRINT: "print">
|<ATRIBUICAO:":=">
|<APARENTESES:"(">
|<FPARENTESES:")">
|<FUNCTION:"function">
|<VIRGULA:",">
|<TOKEN_NUMLITERAL:(["0"-"9"])+ ("."(["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"])+)?>
|<TRUE: "true">
|<FALSE: "false">
|<TOKEN_ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_")*>

}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |<ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
 |<OP: "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==">
 

}
///////////////////////////////////////////////////////////////////////////////////

ArvoreLugosi Lugosi () : //ok
{Main my_main; ArrayList <Func> funcoes = new ArrayList<Func>();}
{ 

  my_main = Main() (funcoes = Func())? <EOF> 
  {return new ArvoreLugosi(my_main, funcoes);}
}

ArrayList <VarDecl> VarDecl(): //ok
{ ArrayList <VarDecl> a = new ArrayList<VarDecl> (); String tipo; String var; Token id;}
{
	(<VAR> tipo = Tipo() id = <TOKEN_ID> <PONTOVIR> {a.add(new VarDecl(id, tipo));})*
    {return a;}
}

String Tipo(): //ok
{Token t;}
{
  t = <TIPO>
  {return t.image;}
}

ArrayList <Comando> SeqComandos(): //ok
{ ArrayList <Comando> c = new ArrayList <Comando> (); Comando comando;}
{
	(comando = Comando() {c.add(comando);})* 
    {return c;}
}
Comando Comando()://ok
{Token id; Exp e; Object comandoNR; ArrayList <Comando> seqComandos; ArrayList <Exp> listExp;}
{
	((id = <TOKEN_ID>) comandoNR = ComandoNR())
        {if (comandoNR instanceof Exp) return new CmdAtribuicao(id, ((Exp) comandoNR));
         else return new CmdChamadaFuncao(id, ((ArrayList<Exp>  ) comandoNR));  }
  	|(<IF> <APARENTESES> (e = Exp()) <FPARENTESES> <ACHAVES> (seqComandos = SeqComandos()) <FCHAVES> <PONTOVIR>)
        {return new CmdIf(e, seqComandos);}
  	|(<WHILE> <APARENTESES> (e = Exp()) <FPARENTESES> <DO> <ACHAVES> (seqComandos =  SeqComandos()) <FCHAVES> <PONTOVIR>)
        {return new CmdWhile(e, seqComandos);}
  	|(<DO> <ACHAVES> (seqComandos = SeqComandos()) <FCHAVES> <WHILE> <APARENTESES> (e = Exp()) <FPARENTESES> <PONTOVIR>)
        {return new CmdDoWhile(e, seqComandos);}
  	|(<RETURN> (e = Exp()) <PONTOVIR>)
        {return new CmdReturn(e);}
  	|(<PRINT> <APARENTESES> (e = Exp()) <FPARENTESES> <PONTOVIR>)
        {return new CmdPrint(e);}
}
ArrayList<Func> Func(): //ok
{ ArrayList<Func> func = new ArrayList<Func> (); Token id; String tipo; ArrayList <ListaArg> argumentos;ArrayList <VarDecl> varD;ArrayList <Comando> seqComandos;}
{
    (<FUNCTION> tipo = Tipo() id = <TOKEN_ID> <APARENTESES> ( argumentos = ListaArg()) <FPARENTESES>
        <ACHAVES> (varD = VarDecl()) (seqComandos =  SeqComandos()) <FCHAVES> {func.add(new Func( id, tipo, argumentos, varD, seqComandos));})+
                                                                            
    {return func;}
}

ArrayList<ListaArg> ListaArg(): //ok
{ArrayList<ListaArg> lista = new ArrayList<ListaArg>(); String tipo1; String tipo2; Token id1; Token id2;}
{
    tipo1 = Tipo() id1 = <TOKEN_ID> (<VIRGULA> tipo2 = Tipo() id2 = <TOKEN_ID> {lista.add(new ListaArg(tipo2, id2));})*
    {lista.add(0, new ListaArg(tipo1, id1)); return lista;}
}


// pra tirar a recurs√£o
Object ComandoNR(): //ok
{Object e;}
{
	(<ATRIBUICAO> (e = Exp()) <PONTOVIR>) 
    {return e;}

  	|(<APARENTESES> (e = ListaExp()) <FPARENTESES> <PONTOVIR>)
    {return e;}
}

Exp Exp(): //ok
{Exp arg1; Exp arg2; Token operador;Fator f;}
{
	(<APARENTESES> arg1 = Exp() operador = <OP> arg2 = Exp() <FPARENTESES>)
    {return new ExpOperador(arg1, arg2, operador.image);}
    
    | f = Fator()
    {return f;}
}

ArrayList<Exp> ListaExp()://ok
{Exp e; Exp ex; ArrayList <Exp> lista2 = new ArrayList <Exp>();}
{
  e = Exp() (<VIRGULA> ex = Exp() {lista2.add(ex);})*
  {lista2.add(0, e); return lista2;}
}

/*void listaExpNR()://talvez nao precise
{}
{
  (<VIRGULA> exp() listaExpNR())?
}*/


Fator Fator()://ok
{Token id; Token num; Token tipo; ArrayList<Exp> fNR;}
{
	(id = <TOKEN_ID> fNR = FatNR())
        {if(fNR.isEmpty()) return new FtrTokenId(id.image);
            else return new FtrExpPar(id.image, fNR);}

	|num = <TOKEN_NUMLITERAL> 
        {return new FtrNumLiteral(num.image);}
    
    | tipo = <TRUE> 
        {return new FtrTipo(tipo.image);}
    | tipo = <FALSE> 
        {return new FtrTipo(tipo.image);}
}

ArrayList<Exp> FatNR()://ok
{ArrayList<Exp> lista = new ArrayList<Exp>();}
{
	(<APARENTESES> lista = ListaExp() <FPARENTESES>)?

    {return lista;}
}


Main Main (): //ok
{ ArrayList <VarDecl> varD; ArrayList <Comando> comandos; }
{
 <MAIN> <ACHAVES> 
 
  varD = VarDecl()
  comandos = SeqComandos()

 <FCHAVES>
 { return new Main(varD, comandos); }

}