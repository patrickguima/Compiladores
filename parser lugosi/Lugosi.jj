PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
    Lugosi parser = new Lugosi(new FileInputStream(args[0]));
    parser.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
|<VAR: "var">
|<PONTOVIR: ";">
|<TIPO: ("int" | "bool")>
|<IF: "if">
|<WHILE: "while">
|<DO: "do">
|<RETURN: "return">
|<PRINT: "print">
|<ATRIBUICAO:":=">
|<APARENTESES:"(">
|<FPARENTESES:")">
|<FUNCTION:"function">
|<VIRGULA:",">
|<TOKEN_NUMLITERAL:(["0"-"9"])+ ("."(["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"])+)?>
|<TRUE: "true">
|<FALSE: "false">
|<TOKEN_ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_")*>

}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |<ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
 |<OP: "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==">
 

}


void Lugosi () :
{}
{ 

  Main() 
//Func()?
  <EOF> 
}

void VarDecl():
{}
{
	(<VAR> <TIPO> <TOKEN_ID> <PONTOVIR>)*

}

void SeqComandos():
{}
{
	(comando())*


}
void comando():
{}
{
	(<TOKEN_ID> comandoNR())
  	|(<IF> <APARENTESES> exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIR>)
  	|(<WHILE> <APARENTESES> exp() <FPARENTESES> <DO> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIR>)
  	|(<DO> <ACHAVES> SeqComandos() <FCHAVES> <WHILE> <APARENTESES> exp() <FPARENTESES> <PONTOVIR>)
  	|(<RETURN> exp() <PONTOVIR>)
  	|(<PRINT> <APARENTESES> exp() <FPARENTESES> <PONTOVIR>)
}

void Func():
{}
{
  (<FUNCTION> <TIPO> <TOKEN_ID> <APARENTESES> (listaArg())? <FPARENTESES> <ACHAVES> VarDecl() SeqComandos() <FCHAVES>)+
}

void listaArg():
{}
{
  <TIPO> <TOKEN_ID> (<PONTOVIR> listaArg())?
}


// pra tirar a recurs√£o
void comandoNR():
{}
{
	(<ATRIBUICAO> exp() <PONTOVIR>) 
  	|(<APARENTESES> listaExp() <FPARENTESES> <PONTOVIR>)

}

void exp():
{}
{
	(<APARENTESES> exp() <OP> exp() <FPARENTESES>)| fator()	
}

void listaExp():
{}
{
  exp() listaExpNR()
}

void listaExpNR():
{}
{
  (<VIRGULA> exp() listaExpNR())?
}


void fator():
{}
{
	(<TOKEN_ID> fatNR())
	|<TOKEN_NUMLITERAL> | <TRUE> | <FALSE> 
}

void fatNR():
{}
{
	(<APARENTESES> (listaExp())?  <FPARENTESES>)?
}


void Main ():
{}
{
 <MAIN> <ACHAVES> 
 
  VarDecl()
  SeqComandos()

 <FCHAVES>

}





